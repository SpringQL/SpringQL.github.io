"use strict";(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[357],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),f=a,g=m["".concat(s,".").concat(f)]||m[f]||c[f]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},38333:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],l={sidebar_position:100},s="Expression",u={unversionedId:"reference/sql/query/expression",id:"reference/sql/query/expression",title:"Expression",description:"Expressions appear anywhere in SELECT statements, such as select_list, where clause, or group-by clause.",source:"@site/docs/reference/sql/query/expression.md",sourceDirName:"reference/sql/query",slug:"/reference/sql/query/expression",permalink:"/reference/sql/query/expression",editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/docs/reference/sql/query/expression.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"Window join",permalink:"/reference/sql/query/window-join"},next:{title:"INSERT statement",permalink:"/reference/sql/insert/"}},p={},c=[{value:"Column reference",id:"column-reference",level:2},{value:"Operator invocation",id:"operator-invocation",level:2},{value:"Function call",id:"function-call",level:2},{value:"Aggregate expression",id:"aggregate-expression",level:2}],m={toc:c};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"expression"},"Expression"),(0,o.kt)("p",null,"Expressions appear anywhere in SELECT statements, such as select_list, where clause, or group-by clause."),(0,o.kt)("p",null,"A expression is one of the following subsections."),(0,o.kt)("h2",{id:"column-reference"},"Column reference"),(0,o.kt)("p",null,"A column in a stream can be referenced as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Column reference"',title:'"Column','reference"':!0},"<stream name>.<column name>\n")),(0,o.kt)("p",null,"Note that, currently, you cannot omit the stream name."),(0,o.kt)("h2",{id:"operator-invocation"},"Operator invocation"),(0,o.kt)("p",null,"An operator takes one (unary operator) or two (binary operator) operands."),(0,o.kt)("p",null,"A operand is also an expression."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Unary operator"',title:'"Unary','operator"':!0},"<unary operator> <expression>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Binary operator"',title:'"Binary','operator"':!0},"<expression> <binary operator> <expression>\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Unary operators:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-"),": Make the expression negative."))),(0,o.kt)("li",{parentName:"ul"},"Binary operators:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"="),": Check if two expressions are equal."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"+"),": Add two expressions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*"),": Multiply two expressions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AND"),": Check if two expressions are both true.")))),(0,o.kt)("h2",{id:"function-call"},"Function call"),(0,o.kt)("p",null,"A function call is composed of a function name and arguments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Function call"',title:'"Function','call"':!0},"<function name> (<arg1>, <arg2>, ...)\n")),(0,o.kt)("p",null,"A function is evaluated in the row-by-row basis, unlike aggregate expressions."),(0,o.kt)("p",null,"Currently, these functions are available."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DURATION_MILLIS(<integer>)"),": Construct a ",(0,o.kt)("inlineCode",{parentName:"li"},"DURATION")," type value from a integer number (milliseconds)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DURATION_SECS(<integer>)"),": Construct a ",(0,o.kt)("inlineCode",{parentName:"li"},"DURATION")," type value from a integer number (seconds)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"FLOOR(<float>)"),": Return the integer part of a float number."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"FLOOR_TIME(<timestamp>, <resolution (duration type)>)"),": Return the timestamp rounded down to the nearest resolution.")),(0,o.kt)("h2",{id:"aggregate-expression"},"Aggregate expression"),(0,o.kt)("p",null,"An aggregate expression is composed of an aggregate function name and arguments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Aggregate expression"',title:'"Aggregate','expression"':!0},"<aggregate function name> (<arg1>, <arg2>, ...)\n")),(0,o.kt)("p",null,"Aggregate expressions are called with window clauses.\nThe final result of an aggregate expression is output when a window pane is closed."),(0,o.kt)("p",null,"Currently, these aggregate functions are available."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AVG(<number>)"),": Average of a number. Result is a float number.")))}f.isMDXComponent=!0}}]);