"use strict";(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[327],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),g=a,d=m["".concat(s,".").concat(g)]||m[g]||c[g]||l;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},52776:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],o={sidebar_position:1.1},s="Expression",u={unversionedId:"reference/sql/query/expression",id:"version-0.15/reference/sql/query/expression",title:"Expression",description:"Expressions appear anywhere in SELECT statements, such as select_list, where clause, or group-by clause.",source:"@site/versioned_docs/version-0.15/reference/sql/query/expression.md",sourceDirName:"reference/sql/query",slug:"/reference/sql/query/expression",permalink:"/reference/sql/query/expression",editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/versioned_docs/version-0.15/reference/sql/query/expression.md",tags:[],version:"0.15",sidebarPosition:1.1,frontMatter:{sidebar_position:1.1},sidebar:"tutorialSidebar",previous:{title:"select_list",permalink:"/reference/sql/query/select-list"},next:{title:"Window aggregation",permalink:"/reference/sql/query/window-aggregation"}},p={},c=[{value:"Constant",id:"constant",level:2},{value:"Null constant",id:"null-constant",level:3},{value:"Numeric constant",id:"numeric-constant",level:3},{value:"String constant",id:"string-constant",level:3},{value:"Boolean constant",id:"boolean-constant",level:3},{value:"Duration constant",id:"duration-constant",level:3},{value:"Column reference",id:"column-reference",level:2},{value:"Special columns",id:"special-columns",level:3},{value:"Operator invocation",id:"operator-invocation",level:2},{value:"Function call",id:"function-call",level:2},{value:"Aggregate expression",id:"aggregate-expression",level:2}],m={toc:c};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"expression"},"Expression"),(0,l.kt)("p",null,"Expressions appear anywhere in SELECT statements, such as select_list, where clause, or group-by clause."),(0,l.kt)("p",null,"A expression is one of the following subsections."),(0,l.kt)("h2",{id:"constant"},"Constant"),(0,l.kt)("h3",{id:"null-constant"},"Null constant"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Null constant literal"',title:'"Null',constant:!0,'literal"':!0},"NULL\n")),(0,l.kt)("h3",{id:"numeric-constant"},"Numeric constant"),(0,l.kt)("p",null,"Currently, the following numeric literals are supported."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Integer constant literal"',title:'"Integer',constant:!0,'literal"':!0},"[0-9]+\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Float constant literal"',title:'"Float',constant:!0,'literal"':!0},"[0-9]+\\.[0-9]+\n")),(0,l.kt)("p",null,"Both are evaluated as minimal-sized signed value.\nFor example, ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," is evaluated as ",(0,l.kt)("inlineCode",{parentName:"p"},"SMALLINT"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"4294967296")," (2^32) is evaluated as ",(0,l.kt)("inlineCode",{parentName:"p"},"INTEGER"),"."),(0,l.kt)("h3",{id:"string-constant"},"String constant"),(0,l.kt)("p",null,"A string constant UTF-8 string wrapped by ",(0,l.kt)("inlineCode",{parentName:"p"},"'")," (single quote). It is evaluated into a TEXT type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="String constant literal examples"',title:'"String',constant:!0,literal:!0,'examples"':!0},"'abc'\n'abc  def'\n'\u3042\u3044\u3046\u3048\u304a'\n'\ud83c\udf63'\n")),(0,l.kt)("h3",{id:"boolean-constant"},"Boolean constant"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TRUE")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"FALSE"),"."),(0,l.kt)("h3",{id:"duration-constant"},"Duration constant"),(0,l.kt)("p",null,"Constructed from a function call prefixed ",(0,l.kt)("inlineCode",{parentName:"p"},"DURATION_"),"."),(0,l.kt)("h2",{id:"column-reference"},"Column reference"),(0,l.kt)("p",null,"A column in a stream can be referenced as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Column reference"',title:'"Column','reference"':!0},"<stream name>.<column name>\n")),(0,l.kt)("p",null,"Note that, currently, you cannot omit the stream name."),(0,l.kt)("h3",{id:"special-columns"},"Special columns"),(0,l.kt)("p",null,"For streams without ",(0,l.kt)("inlineCode",{parentName:"p"},"ROWTIME")," keyword, the ",(0,l.kt)("inlineCode",{parentName:"p"},"ptime")," special column is available to get the processing time of rows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="ptime"',title:'"ptime"'},"<stream name>.ptime\n")),(0,l.kt)("h2",{id:"operator-invocation"},"Operator invocation"),(0,l.kt)("p",null,"An operator takes one (unary operator) or two (binary operator) operands."),(0,l.kt)("p",null,"A operand is also an expression."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Unary operator"',title:'"Unary','operator"':!0},"<unary operator> <expression>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Binary operator"',title:'"Binary','operator"':!0},"<expression> <binary operator> <expression>\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Unary operators:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-"),": Make the expression negative."))),(0,l.kt)("li",{parentName:"ul"},"Binary operators:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"="),": Check if two expressions are equal."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"+"),": Add two expressions."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"*"),": Multiply two expressions."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AND"),": Check if two expressions are both true.")))),(0,l.kt)("h2",{id:"function-call"},"Function call"),(0,l.kt)("p",null,"A function call is composed of a function name and arguments."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Function call"',title:'"Function','call"':!0},"<function name> (<arg1>, <arg2>, ...)\n")),(0,l.kt)("p",null,"A function is evaluated in the row-by-row basis, unlike aggregate expressions."),(0,l.kt)("p",null,"Currently, these functions are available."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DURATION_MILLIS(<integer>)"),": Construct a ",(0,l.kt)("inlineCode",{parentName:"li"},"DURATION")," type value from a integer number (milliseconds)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DURATION_SECS(<integer>)"),": Construct a ",(0,l.kt)("inlineCode",{parentName:"li"},"DURATION")," type value from a integer number (seconds)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FLOOR(<float>)"),": Return the integer part of a float number."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FLOOR_TIME(<timestamp>, <resolution (duration type)>)"),": Return the timestamp rounded down to the nearest resolution.")),(0,l.kt)("h2",{id:"aggregate-expression"},"Aggregate expression"),(0,l.kt)("p",null,"An aggregate expression is composed of an aggregate function name and arguments."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Aggregate expression"',title:'"Aggregate','expression"':!0},"<aggregate function name> (<arg1>, <arg2>, ...)\n")),(0,l.kt)("p",null,"Aggregate expressions are called with window clauses.\nThe final result of an aggregate expression is output when a window pane is closed."),(0,l.kt)("p",null,"Currently, these aggregate functions are available."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AVG(<number>)"),": Average of a number. Result is a float number.")))}g.isMDXComponent=!0}}]);