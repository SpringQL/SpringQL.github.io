"use strict";(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[133],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1750:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Install and Run an App",p={unversionedId:"get-started/install-and-run-app",id:"get-started/install-and-run-app",title:"Install and Run an App",description:"In this page, you will learn how to install SpringQL in your environment and how to run a demo application written in your favorite language.",source:"@site/docs/get-started/install-and-run-app.md",sourceDirName:"get-started",slug:"/get-started/install-and-run-app",permalink:"/get-started/install-and-run-app",editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/docs/get-started/install-and-run-app.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udfe0 Home",permalink:"/"},next:{title:"Write Basic Apps",permalink:"/get-started/write-basic-apps"}},u={},c=[{value:"C",id:"c",level:2},{value:"Rust",id:"rust",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create a bin crate to write a demo",id:"create-a-bin-crate-to-write-a-demo",level:3},{value:"Run the demo",id:"run-the-demo",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"install-and-run-an-app"},"Install and Run an App"),(0,i.kt)("p",null,"In this page, you will learn how to install SpringQL in your environment and how to run a demo application written in your favorite language."),(0,i.kt)("p",null,"SpringQL runs on UNIX-like operating systems, such as Linux and macOS.\nYou might use Cygwin in Windows but it is currently not supported."),(0,i.kt)("p",null,"Choose a language you use from the table of contents."),(0,i.kt)("h2",{id:"c"},"C"),(0,i.kt)("h2",{id:"rust"},"Rust"),(0,i.kt)("p",null,"Using SpringQL from Rust is the simplest way since SpringQL itself is developed as a Rust crate."),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://rustup.rs/"},"Rust toolchain")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nc")," (netcat) command")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prerequisite"),": You have to install ",(0,i.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"Rust toolchain")," first."),(0,i.kt)("h3",{id:"create-a-bin-crate-to-write-a-demo"},"Create a bin crate to write a demo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Create a bin crate"',title:'"Create',a:!0,bin:!0,'crate"':!0},"cargo new --bin springql-demo\ncd springql-demo\n")),(0,i.kt)("p",null,"And then, add ",(0,i.kt)("inlineCode",{parentName:"p"},"springql-core")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'...\n[dependencies]\nspringql-core = "*"\n')),(0,i.kt)("p",null,"Finally, fix ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},'use springql_core::{high_level_rs::SpringPipelineHL, low_level_rs::SpringConfig};\n\nfn main() {\n    // Create a pipeline (dataflow definition in SpringQL).\n    let pipeline = SpringPipelineHL::new(&SpringConfig::default()).unwrap();\n\n    // Create a source stream. A stream is similar to a table in relational database.\n    // A source stream is a stream to fetch stream data from a foreign source.\n    //\n    // `ROWTIME` is a keyword to declare that the column represents the event time of a row.\n    pipeline\n        .command(\n            "\n            CREATE SOURCE STREAM source_temperature_celsius (\n                ts TIMESTAMP NOT NULL ROWTIME,    \n                temperature FLOAT NOT NULL\n            );\n            ",\n        )\n        .unwrap();\n\n    // Create a sink stream.\n    // A sink stream is a final stream in a pipeline. A foreign sink fetches stream rows from it.\n    pipeline\n        .command(\n            "\n            CREATE SINK STREAM sink_temperature_fahrenheit (\n                ts TIMESTAMP NOT NULL ROWTIME,    \n                temperature FLOAT NOT NULL\n            );\n            ",\n        )\n        .unwrap();\n\n    // Create a pump to convert Celsius to Fahrenheit.\n    // A pump fetches stream rows from a stream, make some conversions to the rows, and emits them to another stream.\n    pipeline\n        .command(\n            "\n            CREATE PUMP c_to_f AS\n                INSERT INTO sink_temperature_fahrenheit (ts, temperature)\n                SELECT STREAM\n                    source_temperature_celsius.ts,\n                    source_temperature_celsius.temperature * 1.8 + 32.0\n                FROM source_temperature_celsius;\n            ",\n        )\n        .unwrap();\n\n    // Create a sink writer as an in-memory queue.\n    // A sink writer fetches stream rows from a sink stream, and writes them to various foreign sinks.\n    // Here we use an in-memory queue as the foreign sinks to easily get rows from our program written here.\n    pipeline\n        .command(\n            "\n            CREATE SINK WRITER queue_temperature_fahrenheit FOR sink_temperature_fahrenheit\n            TYPE IN_MEMORY_QUEUE OPTIONS (\n                NAME \'q\'\n            );\n            ",\n        )\n        .unwrap();\n\n    // Create a source reader as a TCP client (connecting to 127.0.0.1:9876).\n    // A source reader fetches stream rows from a foreign source, and emits them to a source stream.\n    //\n    // Dataflow starts soon after this command creates the source reader instance.\n    pipeline\n        .command(\n            "\n            CREATE SOURCE READER tcp_trade FOR source_temperature_celsius\n            TYPE NET_CLIENT OPTIONS (\n                PROTOCOL \'TCP\',\n                REMOTE_HOST \'127.0.0.1\',\n                REMOTE_PORT \'9876\'\n            );\n            ",\n        )\n        .unwrap();\n\n    while let Ok(row) = pipeline.pop("q") {\n        let ts: String = row.get_not_null_by_index(0).unwrap();\n        let temperature_fahrenheit: f32 = row.get_not_null_by_index(1).unwrap();\n        eprintln!("{}\\t{}", ts, temperature_fahrenheit);\n    }\n}\n')),(0,i.kt)("h3",{id:"run-the-demo"},"Run the demo"),(0,i.kt)("p",null,"In your terminal, start a TCP server with ",(0,i.kt)("inlineCode",{parentName:"p"},"nc")," listening to port 9876, who sends 2 JSON records to a client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Running nc server"',title:'"Running',nc:!0,'server"':!0},'echo \'{"ts": "2022-01-01 13:00:00.000000000", "temperature": 5.3}\\n{"ts": "2022-01-01 14:00:00.000000000", "temperature": 6.2}\' | nc -l 9876\n')),(0,i.kt)("p",null,"In another terminal, start the demo app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Running the demo app"',title:'"Running',the:!0,demo:!0,'app"':!0},"cargo run\n")),(0,i.kt)("p",null,"Then you'll get the following outputs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Outputs"',title:'"Outputs"'},"2022-01-01 13:00:00.000000000   41.54\n2022-01-01 14:00:00.000000000   43.16\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Finished!")," You get the temperatures in Celsius translated into Fahrenheit by SpringQL."))}d.isMDXComponent=!0}}]);