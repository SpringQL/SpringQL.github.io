(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[649],{6100:function(e,t,r){"use strict";r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return g},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return l}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),i=r(3456),o=["components"],p={sidebar_position:2},m="Write Basic Apps",c={unversionedId:"get-started/write-basic-apps",id:"get-started/write-basic-apps",title:"Write Basic Apps",description:"You might already succeeded in running a demo app.",source:"@site/docs/get-started/write-basic-apps.md",sourceDirName:"get-started",slug:"/get-started/write-basic-apps",permalink:"/get-started/write-basic-apps",editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/docs/get-started/write-basic-apps.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Install and Run an App",permalink:"/get-started/install-and-run-app"},next:{title:"Introduction: Why to Learn Stream Processing?",permalink:"/learn-springql/introduction-why-to-learn-stream-processing"}},u={},l=[{value:"App1: Simple arithmetic conversion over a stream",id:"app1-simple-arithmetic-conversion-over-a-stream",level:2}],d={toc:l};function g(e){var t=e.components,r=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"write-basic-apps"},"Write Basic Apps"),(0,s.kt)("p",null,"You might already succeeded in ",(0,s.kt)("a",{parentName:"p",href:"./install-and-run-app"},"running a demo app"),".\nNow let's start writing some basic apps step-by-step."),(0,s.kt)("p",null,"You will learn important ideas in stream processing from the following apps, including ",(0,s.kt)("strong",{parentName:"p"},"event time"),", ",(0,s.kt)("strong",{parentName:"p"},"window"),"-based ",(0,s.kt)("strong",{parentName:"p"},"aggregation")," and ",(0,s.kt)("strong",{parentName:"p"},"join"),"."),(0,s.kt)("h2",{id:"app1-simple-arithmetic-conversion-over-a-stream"},"App1: Simple arithmetic conversion over a stream"),(0,s.kt)("p",null,"Let's start with a very simple pipeline (dataflow in SpringQL), which is quite similar to the demo app you saw in previous page."),(0,s.kt)(i.Mermaid,{config:{},chart:'graph TB\n    fsrc(["TCP client (nc)"]) -- "Source reader (TCP server)" --\x3e src[[source_temperature_celsius]] -- Pump: c_to_f<br>temperature * 1.8 + 32.0 --\x3e sink[[sink_temperature_fahrenheit]] -- "Sink writer (TCP client)" --\x3e fsink(["TCP server (nc)"])',mdxType:"Mermaid"}),(0,s.kt)("p",null,"The above diagram represents the pipeline you will define in the code."),(0,s.kt)("p",null,"The top-most node is a foreign ",(0,s.kt)("strong",{parentName:"p"},"source"),". A foreign source continuously inputs data into a stream processing application."),(0,s.kt)("p",null,"The bottom-most represents a foreign ",(0,s.kt)("strong",{parentName:"p"},"sink"),". A foreign sink continuously gets output from the stream processing application."),(0,s.kt)("p",null,"The top square is a source ",(0,s.kt)("strong",{parentName:"p"},"stream")," and the bottom square is a sink stream. A stream is like a table in relational databases, which has a stream name, columns and their data types, and constraints (",(0,s.kt)("inlineCode",{parentName:"p"},"NOT NULL"),", for example)."),(0,s.kt)("p",null,"Edges from the foreign source is a source reader, who reads data from a foreign source and translates them into rows for the next source stream.\nSimilarly, edges into the foreign sink is a sink writer, who fetches the rows in the sink stream and writes them into a foreign sink."),(0,s.kt)("p",null,"The edge between the source stream and the sink stream is a ",(0,s.kt)("strong",{parentName:"p"},"pump"),". A pump reads rows from an upstream ",(0,s.kt)("em",{parentName:"p"},"stream")," (just called ",(0,s.kt)("em",{parentName:"p"},"upstream"),"), processes the rows into other ones, and writes new rows into a downstream ",(0,s.kt)("em",{parentName:"p"},"stream")," (just called ",(0,s.kt)("em",{parentName:"p"},"downstream"),")."))}g.isMDXComponent=!0},1748:function(e,t,r){var n={"./locale":9234,"./locale.js":9234};function a(e){var t=s(e);return r(t)}function s(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=s,e.exports=a,a.id=1748}}]);