"use strict";(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[5699],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(r),f=o,d=p["".concat(u,".").concat(f)]||p[f]||m[f]||i;return r?n.createElement(d,a(a({ref:t},l),{},{components:r})):n.createElement(d,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},60332:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return m}});var n=r(83117),o=r(80102),i=(r(67294),r(3905)),a=["components"],c={sidebar_position:2},u="Configuration",s={unversionedId:"deployment/configuration",id:"version-0.15/deployment/configuration",title:"Configuration",description:"You can configure SpringQL in TOML format.",source:"@site/versioned_docs/version-0.15/deployment/configuration.md",sourceDirName:"deployment",slug:"/deployment/configuration",permalink:"/0.15/deployment/configuration",draft:!1,editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/versioned_docs/version-0.15/deployment/configuration.md",tags:[],version:"0.15",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/0.15/deployment/"},next:{title:"Introduction",permalink:"/0.15/real-world-example/"}},l={},m=[],p={toc:m};function f(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"You can configure SpringQL in TOML format."),(0,i.kt)("p",null,"Default values are used if you don't set the key-value in TOML."),(0,i.kt)("p",null,"Here shows the default values and what they mean."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Default configuration values"',title:'"Default',configuration:!0,'values"':!0},'[worker]\n# Number of generic worker threads. Generic worker threads deal with internal and sink tasks.\n# Setting this to > 1 may improve throughput but lead to out-of-order stream processing.\nn_generic_worker_threads = 1\n\n# Number of source worker threads. Source worker threads collect rows from foreign source.\n# Too many number may may cause row fraud in runtime.\n# Setting this to > 1 may improve throughput but lead to out-of-order stream processing.\nn_source_worker_threads = 1\n\n[memory]\n# How much memory is allowed to be used in SpringQL streaming runtime.\nupper_limit_bytes = 10_000_000\n\n# Percentage over `upper_limit_bytes` to transit from Moderate state to Severe.\n# In Severe state, internal scheduler is changed to exhibit memory-resilience.\nmoderate_to_severe_percent = 60\n\n# Percentage over `upper_limit_bytes` to transit from Severe state to Critical.\n# In Critical state, all intermediate rows are purged to release memory.\nsevere_to_critical_percent = 95\n\ncritical_to_severe_percent = 80\nsevere_to_moderate_percent = 40\n\n# Interval for MemoryStateMachineWorker to publish TransitPerformanceMetricsSummary event.\nmemory_state_transition_interval_msec = 10\n\n# Interval for PerformanceMonitorWorker to publish ReportMetricsSummary event.\nperformance_metrics_summary_report_interval_msec = 10\n\n[web_console]\n# Whether to enable POST API request to web console.\nenable_report_post = false\n\nreport_interval_msec = 3_000\n\nhost = "127.0.0.1"\nport = 8050\n\ntimeout_msec = 3_000\n\n[source_reader]\nnet_connect_timeout_msec = 1_000\nnet_read_timeout_msec = 100\n\n[sink_writer]\nnet_connect_timeout_msec = 1_000\nnet_write_timeout_msec = 100\n')))}f.isMDXComponent=!0}}]);