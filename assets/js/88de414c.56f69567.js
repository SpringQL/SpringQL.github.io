(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[8123],{37662:function(e,t,n){"use strict";n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return d}});var r=n(83117),p=n(80102),s=(n(67294),n(3905)),a=n(93456),i=["components"],o={sidebar_position:6},l="Pump",m={unversionedId:"learn-springql/pipeline/pump",id:"learn-springql/pipeline/pump",title:"Pump",description:"Pumps define stream-to-stream dataflow. A pump fetches rows from upstream streams (often called upstreams), process them, and pushes them to a downstream.",source:"@site/docs/learn-springql/pipeline/pump.md",sourceDirName:"learn-springql/pipeline",slug:"/learn-springql/pipeline/pump",permalink:"/next/learn-springql/pipeline/pump",draft:!1,editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/docs/learn-springql/pipeline/pump.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Sink writer",permalink:"/next/learn-springql/pipeline/sink-writer"},next:{title:"Data type",permalink:"/next/learn-springql/pipeline/data-type"}},u={},d=[],c={toc:d};function f(e){var t=e.components,n=(0,p.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"pump"},"Pump"),(0,s.kt)("p",null,"Pumps define stream-to-stream dataflow. A pump fetches rows from upstream streams (often called ",(0,s.kt)("em",{parentName:"p"},"upstreams"),"), process them, and pushes them to a downstream."),(0,s.kt)("p",null,"Let's look at an example pump:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Pump definition"',title:'"Pump','definition"':!0},"CREATE PUMP pump1 AS\n  INSERT INTO downstream1 (col1, col2)\n  SELECT STREAM\n    ...,\n    ...\n  FROM upstream1\n  ...;\n")),(0,s.kt)("p",null,"Note that this statements includes ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," sub-statement to fetch and process rows from upstreams, and ",(0,s.kt)("inlineCode",{parentName:"p"},"INSERT")," sub-statement to push result rows to downstreams."),(0,s.kt)("p",null,"This statement defines the following pump (the edge in the diagram)."),(0,s.kt)(a.Mermaid,{config:{},chart:'graph TB\n    upstream["upstream1"]\n    -- "pump1" --\x3e\n    downstream["downstream1"]',mdxType:"Mermaid"}),(0,s.kt)("p",null,"Some pumps, such as with join operations, have 2 or more upstreams, while the number of donwstream must be always 1."),(0,s.kt)("p",null,"Pumps with ",(0,s.kt)("inlineCode",{parentName:"p"},"WINDOW")," clause create ",(0,s.kt)("a",{parentName:"p",href:"../window"},"window")," and others do not."))}f.isMDXComponent=!0},11748:function(e,t,n){var r={"./locale":89234,"./locale.js":89234};function p(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}p.keys=function(){return Object.keys(r)},p.resolve=s,e.exports=p,p.id=11748}}]);