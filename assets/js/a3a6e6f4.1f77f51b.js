"use strict";(self.webpackChunkspring_ql=self.webpackChunkspring_ql||[]).push([[5173],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return d}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||o;return r?t.createElement(f,i(i({ref:n},p),{},{components:r})):t.createElement(f,i({ref:n},p))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},61246:function(e,n,r){r.r(n),r.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return s}});var t=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],c={sidebar_position:2},l="Reading CAN data via CAN source reader",u={unversionedId:"real-world-example/can",id:"real-world-example/can",title:"Reading CAN data via CAN source reader",description:"Suppose you are receiving CAN frames from vcan0.",source:"@site/docs/real-world-example/can.md",sourceDirName:"real-world-example",slug:"/real-world-example/can",permalink:"/next/real-world-example/can",editUrl:"https://github.com/SpringQL/SpringQL.github.io/blob/main/docs/real-world-example/can.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/next/real-world-example/"}},p={},s=[],m={toc:s};function d(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reading-can-data-via-can-source-reader"},"Reading CAN data via CAN source reader"),(0,o.kt)("p",null,"Suppose you are receiving CAN frames from ",(0,o.kt)("inlineCode",{parentName:"p"},"vcan0"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Example output from vcan0"',title:'"Example',output:!0,from:!0,'vcan0"':!0},"% ip link show vcan0\n11: vcan0: <NOARP,UP,LOWER_UP> mtu 16 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 10\n    link/can\n\n% candump vcan0\n  vcan0  062   [8]  BF 0A 0D 78 C3 46 47 B4\n  vcan0  024   [8]  8A 0A 05 78 0B 74 F2 B7\n  ...\n")),(0,o.kt)("p",null,"First, you need to create a source stream with the pre-defined columns."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Source stream for CAN source"',title:'"Source',stream:!0,for:!0,CAN:!0,'source"':!0},"CREATE SOURCE STREAM source_can (\n    can_id UNSIGNED INTEGER NOT NULL,\n    can_data BLOB NOT NULL\n);\n")),(0,o.kt)("p",null,"Note that the stream name ",(0,o.kt)("inlineCode",{parentName:"p"},"source_can")," is customizable but column definitions for ",(0,o.kt)("inlineCode",{parentName:"p"},"can_id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"can_data"),", including the column names, must be written as-is."),(0,o.kt)("p",null,"Then you can connect a CAN source reader to the source stream."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="CAN source reader"',title:'"CAN',source:!0,'reader"':!0},"CREATE SOURCE READER can FOR source_can\n    TYPE CAN OPTIONS (\n        INTERFACE '{}'\n    );\n")),(0,o.kt)("p",null,"You can see a working example in Rust here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SpringQL/SpringQL/blob/main/springql-core/examples/can_source_reader.rs"},"https://github.com/SpringQL/SpringQL/blob/main/springql-core/examples/can_source_reader.rs"),"."))}d.isMDXComponent=!0}}]);